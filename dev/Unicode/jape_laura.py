""" Python Character Mapping Codec

    For the Jape Laura encoding

    Bernard Sufrin

"""#"

import codecs

### Codec APIs

class Codec(codecs.Codec):

    def encode(self,input,errors='strict'):

        return codecs.charmap_encode(input,errors,encoding_map)
        
    def decode(self,input,errors='strict'):

        return codecs.charmap_decode(input,errors,decoding_map)

class StreamWriter(Codec,codecs.StreamWriter):
    pass
        
class StreamReader(Codec,codecs.StreamReader):
    pass

### encodings module API

def getregentry():

    return (Codec().encode,Codec().decode,StreamReader,StreamWriter)

### Decoding Map

decoding_map = codecs.make_identity_dict(range(256))
decoding_map.update({
	0x0080: 0x2193, #down_arrow
	0x0081: 0x2190, #left_totalfun
	0x0082: 0x21d0, #double_left_totalfun
	0x0083: 0x2194, #relationarrow
	0x0084: 0x2200, #for_all
	0x0085: 0x2227, #meet
	0x0086: 0x27e6, #fatbra
	0x0087: 0x2987, #fatlparen
	0x0088: 0x2191, #up_arrow
	0x0089: 0x2192, #totalfun
	0x008a: 0x21d2, #double_totalfun
	0x008b: 0x21d4, #double_relationarrow
	0x008c: 0x2203, #there_exists
	0x008d: 0x2228, #join
	0x008e: 0x27e7, #fatket
	0x008f: 0x2988, #fatrparen
	0x0090: 0x2a1f, #fatsemicolon
	0x0091: 0x2264, #leq
	0x0092: 0x2282, #subset
	0x0093: 0x2286, #subseteq
	0x0094: 0x227a, #precedes
	0x0095: 0x227c, #preceq
	0x0096: 0x2208, #elt
	0x0097: 0x2261, #eqv
	0x0098: 0x2982, #fatcolon
	0x0099: 0x2265, #geq
	0x009a: 0x2283, #superset
	0x009b: 0x2287, #supseteq
	0x009c: 0x227c, #follows
	0x009d: 0x227d, #folleq
	0x009e: 0x2209, #notelt
	0x009f: 0x2259, #defines
	0x00a0: 0x22a4, #latticetop
	0x00a1: 0x22a2, #leftstile
	0x00a2: 0x27ea, #muchless
	0x00a3: 0x27e8, #anglebra
	0x00a4: 0x2219, #cdot
	0x00a5: 0x2294, #lub
	0x00a6: 0x222a, #cup
	0x00a7: 0x21bf, #up_spear_left
	0x00a8: 0x22a5, #latticebottom
	0x00a9: 0x22a3, #rightstile
	0x00aa: 0x27eb, #muchgreater
	0x00ab: 0x27e9, #angleket
	0x00ac: 0x22c4, #diamond
	0x00ad: 0x2293, #glb
	0x00ae: 0x2229, #cap
	0x00af: 0x21be, #up_spear_right
	0x00b0: 0x2308, #leftceil
	0x00b1: 0x230a, #leftfloor
	0x00b2: 0x2248, #approxeq
	0x00b3: 0x25b3, #triangleup
	0x00b4: 0x22B2, #restrictdom
	0x00b5: 0x22B4, #corestrictdom # 2a64 is better
	0x00b6: 0x228f, #sqsub
	0x00b7: 0x2291, #sqsubeq
	0x00b8: 0x2309, #rightceil
	0x00b9: 0x230b, #rightfloor
	0x00ba: 0x00f7, #division
	0x00bb: 0x25bd, #triangledown
	0x00bc: 0x22B3, #restrictran
	0x00bd: 0x22B5, #corestrictran # 2a65 is better
	0x00be: 0x2290, #sqsup
	0x00bf: 0x2292, #sqsupeq
	0x00c0: 0x2322, #append
	0x00c1: 0x21d1, #upimp
	0x00c2: 0x219b, #redleft
	0x00c3: 0x21a6, #mapsto
	0x00c4: 0x2260, #neq
	0x00c5: 0x2395, # 0x22a1, #boxsquare
	0x00c6: 0x00ac, #false_that
	0x00c7: 0x2295, #circleplus
	0x00c8: 0x2323, #slurbelow
	0x00c9: 0x21d3, #downimp
	0x00ca: 0x219a, #redright
	0x00cb: 0x2284, #notsubset
	0x00cc: 0x2218, #circlesmall
	0x00cd: 0x2337, # 0x2afe, #boxthin
	0x00ce: 0x2713, #tick
	0x00cf: 0x2297, #circletimes
	0x00d0: 0x2225, #doublebar
	0x00d1: 0x228e, #bagunion
	0x00d2: 0x2205, #emptyset
	0x00d3: 0x21f8, #partialfun
	0x00d4: 0x21d5, #updownimp
	0x00d5: 0x22a0, #boxsquarecross
	0x00d6: 0x220b, #ownership
	0x00d7: 0x00d7, #times
	0x00d8: 0x03b1, #gl_alpha
	0x00d9: 0x03b2, #gl_beta
	0x00da: 0x03b3, #gl_gamma
	0x00db: 0x03b4, #gl_delta
	0x00dc: 0x03b5, #gl_epsilon
	0x00dd: 0x03b6, #gl_zeta
	0x00de: 0x03b7, #gl_eta
	0x00df: 0x03b8, #gl_theta
	0x00e0: 0x03b9, #gl_iota
	0x00e1: 0x03ba, #gl_kappa
	0x00e2: 0x03bb, #gl_lambda
	0x00e3: 0x03bc, #gl_mu
	0x00e4: 0x03bd, #gl_nu
	0x00e5: 0x03be, #gl_xi
	0x00e6: 0x03c0, #gl_pi
	0x00e7: 0x03c1, #gl_rho
	0x00e8: 0x03c3, #gl_sigma
	0x00e9: 0x03c4, #gl_tau
	0x00ea: 0x03c5, #gl_upsilon
	0x00eb: 0x03c6, #gl_phi
	0x00ec: 0x03c7, #gl_chi
	0x00ed: 0x03c8, #gl_psi
	0x00ee: 0x03c9, #gl_omega
	0x00ef: 0x0393, #gu_gamma
	0x00f0: 0x0394, #gu_delta
	0x00f1: 0x0398, #gu_theta
	0x00f2: 0x039b, #gu_lambda
	0x00f3: 0x039e, #gu_xi
	0x00f4: 0x03a0, #gu_pi
	0x00f5: 0x03a3, #gu_sigma
	0x00f6: 0x03a5, #gu_upsilon
	0x00f7: 0x03a6, #gu_phi
	0x00f8: 0x03a8, #gu_psi
	0x00f9: 0x03a9, #gu_omega
	0x00fa: 0x03d0, #glv_epsilon
	0x00fb: 0x03d1, #glv_theta
	0x00fc: 0x03d6, #glv_omega
	0x00fd: 0x03f1, #glv_rho
	0x00fe: 0x03de, #glv_sigma
	0x00ff: 0x03c6, #glv_phi
})

### Encoding Map

encoding_map = codecs.make_encoding_map(decoding_map)




