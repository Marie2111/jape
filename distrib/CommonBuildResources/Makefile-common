#
# $Id$
#

GUIDIR=../../java_japeserver
ENGINEDIR=../../camlengine
RESOURCES=../CommonBuildResources
BUILDRESOURCES=../../CommonBuildResources
COMPILEDIR=./tmp
SOURCES=-I ../../../ocamlengine
SERVERSCRIPT=exec java -jar japeserver.jar

##################################################################
#
#       Default (Unix) targets; Windows build overrides these
#
#       ENGINETARGET   -- what the architecture-specific make should try to build
#       BUILTENGINE    -- what the architecture-specific make builds
#                         (these are only different for the Windows cross-Make)
#       DEPLOYEDENGINE -- name of the binary that gets deployed
#                         (should not be "jape" if we want to use a "jape" script)
#
ENGINETARGET=jape
BUILTENGINE=jape
DEPLOYEDENGINE=jape.engine
#
#       AFTERINSTALL         -- what to do afterwards InstallerKit/install options
#       INSTALLRESOURCES     -- extra resources needed for the installation to work
#       SPLASH               -- splash-image for the installer
#
#
AFTERINSTALL=-cmdunix "sh installjape.sh"
INSTALLRESOURCES=$(BUILDRESOURCES)/README-UNIX $(BUILDRESOURCES)/installjape.sh
SPLASH=$(BUILDRESOURCES)/InstallerKit/japesplash.png
APP=jape
#
#
##################################################################

all:   ; $(MAKE) engine GUI components install

#
#       Multiarchitecture/OS engine build is safest if compilations are in separate directories
#
#       1. Different ocaml versions can be used
#       2. Simultaneous compilations are possible
#
#       Technique: synchronize source files in the compile directory, then compile
#       
#
engine:         ; rsync -v -t --exclude="*.cm*" \
                        $(ENGINEDIR)/Makefile   \
                        $(ENGINEDIR)/.depend    \
                        $(ENGINEDIR)/*.ml*  $(COMPILEDIR);\
                  (cd $(COMPILEDIR); make $(ENGINETARGET))
               
cleanengine:    ; rm -f $(COMPILEDIR)/.depend;\
                  rm -f $(COMPILEDIR)/*;\
                  make engine

#
#       Java is compile-once, run anywhere, so we can make the GUI in one place
#
GUI:            ; cd $(GUIDIR); $(MAKE) -f $(RESOURCES)/Makefile-java EXTRAFILES="*.jpg *.gif" japeserver.jar
CLEANGUI:       ; cd $(GUIDIR); $(MAKE) -f $(RESOURCES)/Makefile-java EXTRAFILES="*.jpg *.gif" clean japeserver.jar

#
#       
#
components::    engine GUI examples ;\
                  rsync -v -t    $(GUIDIR)/japeserver.jar .                       ;\
                  rsync -v -t    $(COMPILEDIR)/$(BUILTENGINE) ./$(DEPLOYEDENGINE)

install:        components; \
                  rsync -v -t    $(BUILDRESOURCES)/installjape.sh . ;\
                  sh installjape.sh

clean:          ; rm -f $(BIN)/japeserver.jar $(BIN)/*.gif $(BIN)/*.jpg $(BIN)/jape $(BIN)/japeserver

distribution::  ; make components; (cd $(BUILDRESOURCES)/InstallerKit; make bootstrap) ;\
                  (cd $(BUILDRESOURCES); make -f Makefile-java installjape.class);\
                  rm -rf bootstrap; mkdir bootstrap;\
                  rsync -v -t -r $(BUILDRESOURCES)/InstallerKit/bootstrap/ bootstrap/ ;\
                  make jarfile

examples:       ; ln -s ../../examples .

jarfile:        examples; \
                java bootstrap.install $(OS)jape.jar    \
                  $(AFTERINSTALL)                       \
                  -app          '$(APP)'                \
                  -splash       $(SPLASH)               \
                  examples                              \
                  -sync $(INSTALLRESOURCES) $(DEPLOYEDENGINE) japeserver.jar  










