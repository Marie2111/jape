<?xml version="1.0" encoding="UTF-8"?>
<html>
<head>
        <title>Standalone Windows Build for Jape</title>
</head>
<body>
        <h1>Standalone Windows Build for Jape</h1>
        <p> Jape can now be built on a standalone Windows machine. Hurrah! I <i>think</i>
            the result is a nice fast Jape, but do tell me if it isn't. </p>

        <p> It wasn't easy to make it all work, and it's not perfectly easy to use.
            Basically, I had to get the Unix build mechanism to work in Windows. The
            result is a bit Unix-geeky. I've written this note for (what I imagine to
            be) the average Windows geek. If you have problems, you can always use the
            normal binary distribution. </p>

        <ol>
        <li> You will need Sun/Oracle Java (not the Microsoft Java). If you don't
                know which version you have, in a command prompt (DOS) window type
                        <code> java -version</code>
                <p>The last line of the response should start "Java Hotspot(TM)
                        Client": I think that's indicative of Sun/Oracle Java.</p>
                <p> If you have the wrong version, get the right one from <a
                                href="http://java.sun.com">Oracle</a>. </p>
                <p>OpenJDK is also known to generate a functioning Jape on Linux,
                        but we haven't tested it on Windows.</p>
        </li>

        <li>You will need Ocaml. Get the latest release from 
                <a href="http://caml.inria.fr/ocaml">INRIA</a>: you need the
                the MinGW version of the binary distribution for Windows (<i>not</i>
                the Cygwin version, surprisingly; <i>not</i> the Microsoft native
                version either). Install it where it wants to go, which is
                <code>C:\Program Files\Objective Caml</code>.</li>

        <li><p>You will need to install cygwin, a package that lets you do Unix-y
               things on Windows. This <i>used to</i> take a bit of work
               and some slightly geeky interaction <!-- (which we have left documented as (a-e) below),-->
               <i>but is now done automatically when you download the
                  abovementioned MinGW version of the binary OCaml
                  distribution for Windows from INRIA</i>
               <a href="http://protz.github.com/ocaml-installer/"
                       >http://protz.github.com/ocaml-installer/</a>.</p>
        </li>

        <li><p>For the rest of the job, you need to understand how Windows hosts
               cygwin, and how cygwin sees its host. If you've put cygwin
               where I recommended, you will have
                       <code>C:\cygwin\bin</code>,
                       <code>C:\cygwin\lib</code>,
                       <code>C:\cygwin\home</code>, and so on. 
                       
               Cygwin sees
                       <code>C:\cygwin</code> as <code>/</code>, so there
               are cygwin-addressable directories
                       <code>/bin,/lib,/home</code>, and so on.
               </p>
               
               <p>There's an especially important directory called
               <code>/cygdrive</code>. <code>/cygdrive/c</code>
               (with a lower case c) is <code>C:</code>;
               <code>/cygdrive/a</code> is <code>A:</code>; and so on.</p></li>

        <li>
                <p>You will need Apache Ant. Don't get it from cygwin: their version
                   is a bit elderly. Get it from 
                   <a href="http://ant.apache.org">Apache</a>. Unpack it
                   and drag the root directory (ant, which contains its own bin
                   and lib and goodness knows what else) into
                   <code>C:\cygwin\bin</code>.</p></li>

        <li>
                <p>Now you have to be geeky. You must edit a file in your home
                   directory in cygwin so that cygwin can find ant, ant can
                   find itself, and ant can find Java. </p>
                <ol type="a">
                        <li>The file is called .bashrc (note that the filename
                                starts with a dot), and it's easy to find -- mine is
                                in <code>C:\cygwin\home\Administrator</code> -- but
                                it has <b>Unix linefeeds</b>, not Windows cr-lfs at
                                the end of lines. So you can't edit it with your
                                usual Windows editors (not even notepad, unless you
                                are rather ingenious).</li>

                        <li>Start a cygwin shell window (it's probably put a nice
                                black-and-green icon for it on your desktop -- see
                                the icon top right in the 'select packages'
                                illustration above).</li>

                        <li>Take a copy of .bashrc, just to be safe: in the shell
                                window type <code>cp .bashrc foodle</code></li>

                        <li>Change to the WindowsJape directory in the jape source
                                you downloaded, and in which you found this file.
                                Type <code>cd
                                  /cygdrive/&lt;somewhere&gt;/jape.source/WindowsJape</code></li>
                        <li>Now, in that directory, type <code>bash enlighten</code>
                                This will add the following lines to
                                  <code>~/.bashrc</code>:
                                <pre>
    <code>export PATH="$PATH:/bin/ant/bin"</code>
    <code>export ANTHOME="/bin/ant"</code>
    <code>export JAVA_HOME="/cygdrive/c/ProgramFiles/Java/jdk1.6.0_03</code>" </pre>
                                (it may not give you the exact same JAVA_HOME line,
                                because it looks at your java installation to find
                                out what to say).</li>
                        <li>This will <b><i>not work</i></b> if you don't put your
                                ant in the right place: it has to be in /bin. Type
                                  <code>ant -version</code> to check that all is
                                well: it should say something starting "Apache Ant
                                version ...". If it doesn't, either ant is in the
                                wrong place, or you didn't type the write bash line,
                                or something. If all else fails, put back the
                                original .bashrc with <code>cp ~/foodle
                                  ~/.bashrc</code> and start again. </li>
                </ol><p></p></li>

        <li><p>Now you are ready to do the actual build. In your WindowsJape
                        directory type <code>make all</code> and it should, after
                        some thrashing around, build a file called
                                <code>InstallWindowsJape.jar</code>.</p></li>

        <li><p>And that's it: you've done it. Double-click InstallWindowsJape.jar,
                        follow the prompts.</p></li>

        <li><p>What could go wrong? Well, for me, these things went wrong while I
                        was debugging the mechanism: </p><ul style="circle">
                        <li>I didn't edit my .bashrc file properly, got Windows
                                cr-lfs in it instead of Unix lfs, and when I started
                                a cygwin shell I got lots of complaints about
                                returns.</li>
                        <li>I didn't load enough cygwin packages, and the build
                                failed saying something like 'as is not a command in
                                ....' or 'bash: make: command not found' (this
                                should not happen with the latest MinGW-based Ocaml
                                download incorporating cygwin)</li>
                        <li>It couldn't find ant because I'd set the wrong ANTHOME,
                                or put an underscore in the name, or something.</li>
                        <li>It couldn't find JAVA_HOME (ant complains it can't find
                                tools.jar, typically). Again, check that you've done
                                exactly the right thing in your .bashrc.</li>
                </ul>
                <p>Otherwise it's been plain sailing (apart from the hassle of
                        setting all this up, finding an editor I could bear to use,
                        etc.). And if you're not a geek: yes, it isn't
                        straightforward. But in that case why aren't you using the binary
                        distribution?</p></li>
</ol>
<p> Richard Bornat<br />
        <a href="mailto:richard@bornat.me.uk">richard@bornat.me.uk</a><br />
        6/ii/2008 </p>
</body>
</html>

