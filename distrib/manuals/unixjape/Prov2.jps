%!PS-Adobe-3.0 EPSF-3.0 
%%Creator: JapeServer Proof Canvas (Bernard.Sufrin@comlab.ox.ac.uk)
%%BoundingBox: 260.86 397.36 334.41 444.53
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation:  Portrait
%%DocumentNeededResources: font Konstanz 
%%%%
%%%%
%%
%% $Id$
%%
%%EndComments

%%Prolog
80 dict begin %% Ends at Trailer

%
% These can be adjusted by hand (use ps2epsi to correct the bounding box info)
%
/Scale       { 1 }  def
/ROTATE      { false } def
/SHOWBBOX    { false } def

%
% These can also be adjusted by hand
%
/Margin      { 72 } def %% -> surrounding marginwidth
/PaperWidth  { 595.28  }  def %% -> REAL paperwidth in points 
/PaperHeight { 841.89  } def %% -> REAL paperheight in points

% Intrinsic properties of the image (and its originating terminal)
/Pixels      { 1.25 div } def %% (n) pixels -> points
/ImageWidth  { 92 Pixels } def %% -> image width in points
/ImageHeight { 59 Pixels } def %% -> image height in points
/ImageX      { 636 Pixels } def %% -> image bbox origin in points
/ImageY      { -69 Pixels } def %% -> image bbox origin in points


%
%    Font definitions
%

%    
%    Tk uses the BDF font metrics, and PS uses the .gsf
%    font metrics and these are not, in general, consistent.
%    This function calculates the right point size to use to maintain
%    metric consistency (as far as possible).
%
/PointSize % fontname nominalpointsize tkwidthinpixels -> neededpointsize
{ 
  Pixels  /width exch def
  /points exch def
  /font   exch def
  
   font findfont points scalefont setfont 
   testText stringwidth pop % pswidth of the string
   width exch div  % tkwidth/pswidth
   points  mul     % the corrected point size

   0.94 mul        % a magical fudge factor (I hate magic, but I'm in a hurry)
}
def


/testText (abcdefghijklmnopqrstuvwxyzÄÅÇ≠) def
/textSize /Konstanz 14.000000 218.000000 PointSize def
/textFont { /Konstanz findfont textSize scalefont setfont} def
/menuSize /Konstanz 14.000000 218.000000 PointSize def
/menuFont { /Konstanz findfont menuSize scalefont setfont} def
/commentSize /Konstanz 14.000000 218.000000 PointSize def
/commentFont { /Konstanz findfont commentSize scalefont setfont} def

%
% these definitions are invariant across jape proofs
%


/BOX
{ /h exch def
  /w exch def
  /y exch def
  /x exch def
  newpath
  x y moveto
  w 0 rlineto 
  0 h rlineto
  w neg 0 rlineto closepath 
  1 setlinewidth stroke
} def

/TXT { /txt exch def /y exch def /x exch def 
       x y txt 0 0 TextItem } def

/IMAGESETUP
{ 
  % move to bottom left of drawing area
  Margin Margin translate 
  % swap axes if rotating
  ROTATE                       
  { ImageWidth  ImageHeight 
   /ImageWidth  exch def 
   /ImageHeight exch def 
  } 
  if  
  
  % move to origin of drawing area on paper
  % (we shall centre the drawing)
  PaperWidth  Margin 2 mul sub ImageWidth  Scale mul sub 2 div  
  PaperHeight Margin 2 mul sub ImageHeight Scale mul sub 2 div translate
  
  % if rotating correct the origin
  ROTATE
  { 90 rotate 0 ImageHeight Scale mul neg translate}
  if 
  
  % draw in scaled space
  Scale dup scale
}
def

%
% Coordinates below here are in the original Tk pixelspace
%
% 
% x, y, w,  h, thick  BoxItem
% x, y, x1, y1, thick LineItem
% x, y, [lines], selected, greyed TextItem
%
%

/Moveto { ImageY sub exch ImageX sub exch ImageHeight exch sub moveto } def
/Lineto { ImageY sub exch ImageX sub exch ImageHeight exch sub lineto } def

/BoxItem
{ Pixels /thick exch def
  Pixels /h  exch def
  Pixels /w  exch def
  Pixels /y  exch def
  Pixels /x  exch def
  newpath x        y       Moveto 
          w        0       rlineto
          0        h neg   rlineto
          w neg    0       rlineto closepath thick setlinewidth stroke
} bind def

/LineItem
{ Pixels /thick exch def
  Pixels /yy  exch def
  Pixels /xx  exch def
  Pixels /y   exch def
  Pixels /x   exch def
  newpath x   y  Moveto 
          xx  yy Lineto thick setlinewidth stroke
} bind def

/beginSelection
{
  1.0 0.0 0.0 setrgbcolor
} bind def

/endSelection
{
  0.0 0.0 0.0 setrgbcolor
} bind def

/TextItem 
{ /greyed    exch def
  /selected  exch def
  /lines     exch def
  Pixels  /y exch def
  Pixels  /x exch def
  
  %% Calculate font height and baseline offset
  0 0 moveto (|TXygqPZ) false charpath
  pathbbox dup /baseline exch def
  exch pop exch sub /height exch def pop
  newpath
  %% Get the top of the bounding box right
  /y y height add def
  %%
  
  gsave greyed 1 eq  { .5 setgray } if % grey text?
  
  x  y  Moveto
  lines {  show   
           /y y height add def
           x  y Moveto 
        }  forall 
        
  grestore
} bind def



%%EndProlog
%%BeginSetup
%%IncludeResource: font kon
%%EndSetup


%%Page: 1 1
save


% Draw the bounding box (for debugging)
SHOWBBOX
 {gsave .5 setgray 260.86 397.36 334.41 260.86 sub 444.53 397.36 sub BOX grestore}
if
%

IMAGESETUP
textFont
654 -69 [(\040\346\040) ] 0 0 TextItem

commentFont
669 -44 [(\346\350) ] 0 0 TextItem

639 -51 726 -51 2 LineItem

textFont
645 -25 [(Q) ] 0 0 TextItem

textFont
674 -69 [(Q[x\\m]) ] 0 0 TextItem

textFont
681 -25 [(\350x.Q) ] 0 0 TextItem

textFont
638 -69 [(Q) ] 0 0 TextItem

textFont
661 -25 [(\040\346\040) ] 0 0 TextItem


restore 
showpage
%%Trailer
end
%%EOF

